53.Given an integer array nums, find the subarray which has the largest sum and return its sum.
Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

                            *************kadane algorithm***********

class Solution {
    public int maxSubArray(int[] nums) {
        int omaxsum=nums[0],imaxsum=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            imaxsum=Math.max(nums[i],nums[i]+imaxsum);
            omaxsum=Math.max(imaxsum,omaxsum);
        }
        return omaxsum;
    }
}

************************************************************************************************************************************************************
217. Contains Duplicate
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Example 1:

Input: nums = [1,2,3,1]
Output: true

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int j=1;j<nums.length;j++)
            {
                if(nums[j]==nums[j-1])
                {
                    return true;
                }
            }
        return false;
    }
}
************************************************************************************************************************************************************
// Recursive Java Program to reverse an array
import java.io.*;
 
class ReverseArray {
 
    /* Function to reverse arr[] from start to end*/
    static void rvereseArray(int arr[], int start, int end)
    {
        int temp;
        if (start >= end)
            return;
        temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        rvereseArray(arr, start+1, end-1);
    }
    
    
// Iterative java program to reverse an array
public class GFG {
     
   /* Function to reverse arr[] from
    start to end*/
    static void rvereseArray(int arr[],int start, int end)
    {
        int temp;
          
        while (start < end)
        {
            temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    
************************************************************************************************************************************************************
Maximum and minimum of an array using Linear search:

Initialize values of min and max as minimum and maximum of the first two elements respectively. 
Starting from 3rd, compare each element with max and min, and change max and min accordingly 
(i.e., if the element is smaller than min then change min, else if the element is greater than 
max then change max, else ignore the element) 


// Java program of above implementation
public class GFG {
/* Class Pair is used to return two values from getMinMax() */
	static class Pair {

		int min;
		int max;
	}

	static Pair getMinMax(int arr[], int n) {
		Pair minmax = new Pair();
		int i;

		/*If there is only one element then return it as min and max both*/
		if (n == 1) {
			minmax.max = arr[0];
			minmax.min = arr[0];
			return minmax;
		}

		/* If there are more than one elements, then initialize min
	and max*/
		if (arr[0] > arr[1]) {
			minmax.max = arr[0];
			minmax.min = arr[1];
		} else {
			minmax.max = arr[1];
			minmax.min = arr[0];
		}

		for (i = 2; i < n; i++) {
			if (arr[i] > minmax.max) {
				minmax.max = arr[i];
			} else if (arr[i] < minmax.min) {
				minmax.min = arr[i];
			}
		}

		return minmax;
	}

	/* Driver program to test above function */
	public static void main(String args[]) {
		int arr[] = {1000, 11, 445, 1, 330, 3000};
		int arr_size = 6;
		Pair minmax = getMinMax(arr, arr_size);
		System.out.printf("\nMinimum element is %d", minmax.min);
		System.out.printf("\nMaximum element is %d", minmax.max);

	}

}

************************************************************************************************************************************************************
Chocolate Distribution Problem

Given an array of N integers where each value represents the number of chocolates in a packet. 
Each packet can have a variable number of chocolates. There are m students, the task is to distribute chocolate packets such that: 

Each student gets one packet.
The difference between the number of chocolates in the packet with maximum chocolates and the packet with minimum
chocolates given to the students is minimum.

Examples:

    Input : arr[] = {7, 3, 2, 4, 9, 12, 56} , m = 3 
    Output: Minimum Difference is 2 
    Explanation:
    We have seven packets of chocolates and we need to pick three packets for 3 students 
    If we pick 2, 3 and 4, we get the minimum difference between maximum and minimum packet sizes.
    
Naive Approach for Chocolate Distribution Problem

    The idea is to generate all subsets of size m of arr[0..n-1]. For every subset, find the difference between the maximum and minimum elements in it. 
    Finally, return the minimum difference.

Efficient Approach for Chocolate Distribution Problem

    The idea is based on the observation that to minimize the difference, we must choose consecutive elements from a sorted packet.
    We first sort the array arr[0..n-1], then find the subarray of size m with the minimum difference between the last and first elements.
    
// JAVA Code For Chocolate Distribution
// Problem
import java.util.*;

class GFG {

	// arr[0..n-1] represents sizes of
	// packets. m is number of students.
	// Returns minimum difference between
	// maximum and minimum values of
	// distribution.
	static int findMinDiff(int arr[], int n, int m)
	{
		// if there are no chocolates or
		// number of students is 0
		if (m == 0 || n == 0)
			return 0;

		// Sort the given packets
		Arrays.sort(arr);

		// Number of students cannot be
		// more than number of packets
		if (n < m)
			return -1;

		// Largest number of chocolates
		int min_diff = Integer.MAX_VALUE;

		// Find the subarray of size m
		// such that difference between
		// last (maximum in case of
		// sorted) and first (minimum in
		// case of sorted) elements of
		// subarray is minimum.

		for (int i = 0; i + m - 1 < n; i++) {
			int diff = arr[i + m - 1] - arr[i];
			if (diff < min_diff)
				min_diff = diff;
		}
		return min_diff;
	}

	/* Driver program to test above function */
	public static void main(String[] args)
	{
		int arr[] = { 12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50 };

		int m = 7; // Number of students

		int n = arr.length;
		System.out.println("Minimum difference is "+ findMinDiff(arr, n, m));
	}
}

**************************************************************************************************************************************************************
33. Search in Rotated Sorted Array
There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

class Solution {
    public int search(int[] nums, int target) {
        //Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target)
            {
                return i;
            }
        }
        return -1;
    }
}
***********************************************************************************************************************************************************
121. Best Time to Buy and Sell Stock
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


public class Solution {
    public int maxProfit(int prices[]) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < minprice)
                minprice = prices[i];
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
}
***********************************************************************************************************************************************************
